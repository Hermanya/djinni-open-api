// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from _main_.djinni

#pragma once
#include "../interface/Error.hpp"
#include "../interface/PetStoreService.hpp"
#include "../wrappers/HttpImpl.hpp"

#include <functional>
#include <optional/optional.hpp>
#include <string>
#include <vector>

namespace EXAMPLE {

struct Error;
struct Pet;

/** Responsible for PetStore related REST calls */
class PetStoreServiceImpl: public PetStoreService {
private:
    std::shared_ptr<HttpImpl> _http;
public:
    PetStoreServiceImpl(std::shared_ptr<HttpImpl> http_): _http(std::move(http_)){}

    /**
     * Returns all pets from the system that the user has access to
     * @param callback takes list of djinni_type and Error, one of them is null
     */
    virtual void getPets(const std::function<void(std::experimental::optional<std::vector<Pet>>, std::experimental::optional<Error>)> & callback) override;

    /**
     * description
     * @param callback takes nullable Error
     */
    virtual void getMe(const std::function<void(std::experimental::optional<Error>)> & callback) override;

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
    virtual void getPetWithPetId(const std::string & petId, const std::function<void(std::experimental::optional<std::vector<Pet>>, std::experimental::optional<Error>)> & callback) override;

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
    virtual void deletePetWithPetId(const std::string & petId, const std::function<void(std::experimental::optional<Error>)> & callback) override;

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
    virtual void postPetWithPet(const Pet & pet, const std::function<void(std::experimental::optional<Error>)> & callback) override;

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
    virtual void putPet(const std::function<void(std::experimental::optional<Error>)> & callback) override;
};

}  // namespace EXAMPLE
