// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from _main_.djinni

#include "./PetStoreServiceImpl.hpp"
#include "../wrappers/HttpImpl.hpp"
#include <json11/json11.hpp>
#include "../interface/Error.hpp"
#include "../interface/Pet.hpp"

#include <functional>
#include <optional/optional.hpp>
#include <string>
#include <vector>

namespace EXAMPLE {




/** Responsible for PetStore related REST calls */


    /**
     * Returns all pets from the system that the user has access to
     * @param callback takes list of djinni_type and Error, one of them is null
     */
void PetStoreServiceImpl::getPets (const std::function<void(std::experimental::optional<std::vector<Pet>>, std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/pets";
    _http.get()->get(path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        optional<std::vector<djinni_type>> maybeResponse;
        if (resp.error) {
            maybeError = Error(resp.reason);
        } else {
            std::vector<djinni_type> items;
            for (auto &item : resp.json.array_items()) {
                items.push_back(parsed_json_to_djinni_type(item));
            }
            maybeResponse = items;
        }
        callback(maybeResponse, maybeError);
    });
}

    /**
     * description
     * @param callback takes nullable Error
     */
void PetStoreServiceImpl::getMe (const std::function<void(std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/me";
    _http.get()->get(path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        if (resp.error) {
            maybeError = Error(resp.reason);
        }
        callback(maybeError);
    });
}

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
void PetStoreServiceImpl::getPetWithPetId (const std::string & petId, const std::function<void(std::experimental::optional<std::vector<Pet>>, std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/pet/{petId}";
    path.replace(path.find("{petId}"), 7, json11::Json((int)petId).dump());
    _http.get()->get(path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        optional<djinni_type> maybeResponse;
        if (resp.error) {
            maybeError = Error(resp.reason);
        } else {
            maybeResponse = parsed_json_to_djinni_type(resp.json);
        }
        callback(maybeResponse, maybeError);
    });
}

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
void PetStoreServiceImpl::deletePetWithPetId (const std::string & petId, const std::function<void(std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/pet/{petId}";
    path.replace(path.find("{petId}"), 7, json11::Json((int)petId).dump());
    _http.get()->remove(path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        if (resp.error) {
            maybeError = Error(resp.reason);
        }
        callback(maybeError);
    });
}

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
void PetStoreServiceImpl::postPetWithPet (const Pet & pet, const std::function<void(std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/pet/{petId}";
    _http.get()->post(json_from_undefined(pet), path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        if (resp.error) {
            maybeError = Error(resp.reason);
        }
        callback(maybeError);
    });
}

    /**
     * Returns all pets from the system that the user has access to
     * @param petId Pet id
     * @param callback takes list of djinni_type and Error, one of them is null
     */
void PetStoreServiceImpl::putPet (const std::function<void(std::experimental::optional<Error>)> & callback) {
    std::string path = "/rest/v40/pet/{petId}";
    _http.get()->put("", path, [callback] (HttpResponse resp) {
        optional<Error> maybeError;
        if (resp.error) {
            maybeError = Error(resp.reason);
        }
        callback(maybeError);
    });
}


}  // namespace EXAMPLE
